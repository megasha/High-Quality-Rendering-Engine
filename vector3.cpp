#include "vector3.h"
void Vector3::Lerp(float t, const Vector3 a, const Vector3 b){
	/*
	*this = a; 
	*this *= 1.0f - t; 
	x += b.x*t; 
	y += b.y*t; 
	z += b.z*t; 
	*/

	float x0 = (1.0f - t) * a.x;
	float y0 = (1.0f - t) * a.y;
	float z0 = (1.0f - t) * a.z;
	x0 += (b.x*t);
	y0 += (b.y*t);
	z0 += (b.z*t);

	x = x0;
	y = y0;
	z = z0;

}
//////////////////////////////////////////////////////////////////////////////

Vector3 Vector3::operator+ (const Vector3& v){
	return Vector3(x + v.x, y + v.y, z + v.z);
}

//////////////////////////////////////////////////////////////////////////////

Vector3 Vector3::operator+= (const Vector3& v){
	x += v.x; y += v.y; z += v.z;
	return *this;
}

//////////////////////////////////////////////////////////////////////////////

Vector3 Vector3::operator- (const Vector3& v){
	return Vector3(x - v.x, y - v.y, z - v.z);
}

//////////////////////////////////////////////////////////////////////////////

Vector3 Vector3::operator-= (const Vector3& v){
	x -= v.x; y -= v.y; z -= v.z;
	return *this;
}

//////////////////////////////////////////////////////////////////////////////

Vector3 Vector3::operator* (float a){
	return Vector3(x * a, y * a, z * a);
}

//////////////////////////////////////////////////////////////////////////////

Vector3 Vector3::operator*= (float a){
	x *= a; y *= a; z *= a;
	return *this;
}

//////////////////////////////////////////////////////////////////////////////

Vector3 Vector3::operator* (const Vector3& v){
	return Vector3(x * v.x, y * v.y, z * v.z);
}

//////////////////////////////////////////////////////////////////////////////

Vector3 Vector3::operator*= (const Vector3& v){
	x *= v.x; x *= v.y; z *= v.z;
	return *this;
}

//////////////////////////////////////////////////////////////////////////////

Vector3 Vector3::operator/ (float a){
	float inv = 1.0f / a;
	return Vector3(x * inv, y * inv, z * inv);
}

//////////////////////////////////////////////////////////////////////////////

Vector3 Vector3::operator/= (float a){
	float inv = 1.0f / a;
	x *= inv; y *= inv; z *= inv;
	return *this;
}

//////////////////////////////////////////////////////////////////////////////

Vector3 Vector3::operator/ (const Vector3& v){
	return Vector3(x / v.x, y / v.y, z / v.z);
}

//////////////////////////////////////////////////////////////////////////////

Vector3 Vector3::operator/= (const Vector3& v){
	x /= v.x; y /= v.y; z /= v.z;
	return *this;
}

//////////////////////////////////////////////////////////////////////////////

Vector3 Vector3::Negate() {
	return Vector3(-x, -y, -z);
}

//////////////////////////////////////////////////////////////////////////////

Vector3 Vector3::Scale(float v) {
	return Vector3(x*v, y*v, z*v);
}

//////////////////////////////////////////////////////////////////////////////

float Vector3::Dot(const Vector3& a){
	return x*a.x + y*a.y + z*a.z;
}

//////////////////////////////////////////////////////////////////////////////

void Vector3::Cross(const Vector3& a, const Vector3& b){
	x = a.y*b.z - a.z*b.y; y = a.z*b.x - a.x*b.z; z = a.x*b.y - a.y*b.x;
}

float Vector3::at(int i) {
	return(((float*)this)[i]);
}

//////////////////////////////////////////////////////////////////////////////

float Vector3::Mag2(){
	return x * x + y * y + z * z;
}

//////////////////////////////////////////////////////////////////////////////

float Vector3::Mag(){
	return sqrtf(Mag2());
}

//////////////////////////////////////////////////////////////////////////////

Vector3 Vector3::Normalize(){
	return (*this /= Mag());
}

//////////////////////////////////////////////////////////////////////////////
